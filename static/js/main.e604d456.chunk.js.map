{"version":3,"sources":["component/task.js","component/tasksComp.js","component/TaskForm.js","component/post.js","App.js","serviceWorker.js","index.js"],"names":["Task","color","this","props","task","done","textDecoration","backgroundColor","className","style","StyleComplete","title","description","id","type","onChange","checkDone","btnDelete","onClick","deleteTask","React","Component","border","borderRadius","fontSize","cursor","Taskscomp","tasks","map","key","bind","TaskForm","state","onSubmit","e","addTask","preventDefault","setState","target","name","value","placeholder","Posts","posts","fetch","res","json","data","post","body","App","newTask","length","newTasks","filter","to","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e604d456.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Task extends React.Component {\r\n    \r\n    StyleComplete() {\r\n        return {\r\n            color: this.props.task.done ? 'grey' : 'black',\r\n            textDecoration: this.props.task.done ? 'line-through' : 'none',\r\n            backgroundColor: this.props.task.done ? '#b5e7a0' : '#eca1a6'\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const {task} = this.props;\r\n\r\n        return <div className=\"taskElement\" style={this.StyleComplete()}>\r\n            {task.title} -\r\n            {task.description} -\r\n            {task.done} -\r\n            {task.id}\r\n            <input type=\"checkbox\" onChange={this.props.checkDone} />\r\n            <button style={btnDelete} onClick={this.props.deleteTask}>\r\n                X\r\n            </button>\r\n        </div>\r\n    }\r\n}\r\n\r\nconst btnDelete = {\r\n    backgroundColor: 'red',\r\n    color: 'white',\r\n    border: 'none',\r\n    borderRadius: '50%',\r\n    fontSize: '16px',\r\n    cursor: 'pointer'\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './task';\r\n\r\nclass Taskscomp extends React.Component {\r\n    render() {\r\n        return this.props.tasks.map(task => \r\n        <Task \r\n        task = {task} \r\n        key={task.id}\r\n        deleteTask={this.props.deleteTask.bind(this, task.id)}\r\n        checkDone={this.props.checkDone.bind(this, task.id)}\r\n        />)\r\n    \r\n\r\n    }\r\n}\r\n\r\nexport default Taskscomp;","import React from 'react';\r\n\r\nclass TaskForm extends React.Component {\r\n\r\n  state = {\r\n    title: '',\r\n    description: '',\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    this.props.addTask(this.state.title, this.state.description)\r\n    e.preventDefault();\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState ({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n      return (\r\n      <form onSubmit={this.onSubmit}>\r\n        <input \r\n          name=\"title\"\r\n          type=\"text\"\r\n          placeholder=\"Title task\"\r\n          onChange={this.onChange}\r\n          value={this.state.title}\r\n          />\r\n        <br/>\r\n        <br/>\r\n        <textarea \r\n          name=\"description\"\r\n          placeholder=\"Description task\"\r\n          onChange={this.onChange}\r\n          value={this.state.description}>\r\n        </textarea>\r\n        <br/>\r\n        <button type=\"submit\"> Save task </button>\r\n      </form>\r\n      )}\r\n}\r\n\r\n\r\nexport default TaskForm;","import React, { Component } from 'react'\r\n\r\nexport default class Posts extends Component {\r\n\r\n    state = {\r\n        posts: []\r\n    }\r\n    \r\n    async componentDidMount() {\r\n        const res = await fetch('https://jsonplaceholder.typicode.com/posts')\r\n        const data = await res.json();\r\n        this.setState({posts: data})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Post</h1>\r\n                {\r\n                    this.state.posts.map(post => {\r\n                        return <div key={post.id}>\r\n                                <h2>{post.title}</h2>\r\n                                <p> {post.body} </p>\r\n                            </div>\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link} from 'react-router-dom';\nimport './App.css';\nimport tasks from './sample/Tasks.json';\nimport Taskscomp from './component/tasksComp';\nimport TaskForm from './component/TaskForm';\nimport Posts from './component/post';\n\n\n/* function Helloworld(props) {\n  return (\n    <div id=\"content\">\n      <h3> {props.tittle} </h3>\n      {props.subtittle}\n    </div>\n  )\n} \n\nclass Helloworld extends React.Component {\n  \n  state = {\n    show: true\n  }\n\n  showhide = () => {\n    this.setState({show: !this.state.show})\n  }\n\n  render() {\n    if (this.state.show) {\n      return (\n        <div id=\"content\">\n        <h3> {this.props.tittle} </h3>\n        {this.props.subtittle}\n        <button class=\"button\"  onClick={this.showhide} >Hide</button>\n      </div>\n      )  \n    } else {\n      return (<div>\n        <button class=\"button\" onClick={this.showhide}>Show content</button>\n        </div>\n      )\n    }\n  }\n}\n\nfunction App() {\n  return (\n    <div> <h1><b>This are the today's news!</b> </h1>\n      <Helloworld tittle=\"tittle 1\" subtittle=\"subttitle 1\"/>\n      <Helloworld tittle=\"tittle 2\" subtittle=\"subttitle 3\"/>\n      <Helloworld tittle=\"tittle 3\" subtittle=\"subttitle 3\"/>\n    </div>\n    \n  )\n}\n*/\n\nclass App extends React.Component {\n\n  state = {\n    tasks: tasks\n  }\n\n  addTask = (title, description) => {\n    const newTask = {\n      title: title,\n      description: description,\n      id: this.state.tasks.length\n    }\n    this.setState({\n      tasks: [...this.state.tasks, newTask]\n    })\n  }\n\n\n  deleteTask = (id) => {\n    const newTasks = this.state.tasks.filter(task => task.id !== id)\n    this.setState({tasks: newTasks})\n  }\n\n\n  checkDone = (id) => {\n    const newTasks = this.state.tasks.map(task => {\n      if (task.id === id) {\n        task.done = !task.done\n      }\n      return task;\n    })\n    this.setState({task: newTasks})\n  }\n\n  render() {\n    return <div>\n      <Router>\n        <div className=\"links\">\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/Posts\">Posts</Link>\n        </div>\n        <Route exact path=\"/\" render={() => {\n          return <div>\n           <div className=\"taskform\">\n           <TaskForm addTask={this.addTask} /> \n            </div> \n            <div className=\"taskcomp\">\n              <Taskscomp tasks = {this.state.tasks} \n            deleteTask={this.deleteTask}\n            checkDone={this.checkDone}\n            />\n            </div>\n          </div>\n        }}>\n        </Route>\n        <Route path=\"/posts\" component={Posts} />\n      </Router>\n    </div>\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}